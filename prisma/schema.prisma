// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id      String  @id @default(uuid())
  name    String  @unique   @db.VarChar(255)
  products Product[]
}

model Size {
  id      String  @id @default(uuid())
  name    String  @unique   @db.VarChar(255)
  products Product[]
}

model Product {
  id      String  @id @default(uuid())
  name            String  @unique   @db.VarChar(255)
  price           Float
  imagePublicId   String      // Lưu public ID của hình ảnh trên Cloudinary
  imageUrl        String      // Lưu đường dẫn URL của hình ảnh
  description     String?
  inventoryNumber Int?  // số lượng tồn kho
  quantitySold    Int?  @default(0)// số lượng bán 
  brandId         String?
  brand           Brand?   @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sizeId          String?
  size            Size?   @relation(fields: [sizeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders          OrderProduct[]
}

model Order {
  id           String @id @default(uuid())
  userId       String
  status       Order_Status @default(PENDING)
  totalAmount  Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  deletedAt    DateTime?
  user     User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products OrderProduct[]
}

enum Order_Status {
  PENDING
  CONFIRMED
  SHIPPED
  COMPLETED
  CANCELLED
}

model OrderProduct {
  id          String @id @default(uuid())
  orderId     String
  productId    String
  quantity    Int
  price       Float
  order    Order @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product  Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id      String  @id @default(uuid())
  email String @unique
  password  String
  name  String?  @db.VarChar(255)
  phone String?
  address String?
  avatar  String?
  role Roles @default(USER)
  refreshToken  String?
  orders Order[]
}
enum Roles {
  ADMIN
  USER
}

